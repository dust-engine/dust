#version 460
#include "standard.glsl"

layout(shaderRecordEXT) buffer sbt {
    GeometryInfo geometryInfo;
    MaterialInfo materialInfo;
    PaletteInfo paletteInfo;
};

/**
  Intersects ray with a unix box with 4x4x4 voxels. A branchless implementation of
  Amanatides, John & Woo, Andrew. (1987). A Fast Voxel Traversal Algorithm for Ray Tracing. Proceedings of EuroGraphics. 87.

  @param(origin): The origin of the ray.
  @param(dir):    The direction of the ray. Does not have to be normalized.
  @param(grid):   The occupancy of the 64 voxels encoded in z-curve order.
*/
void dda(vec3 origin, vec3 dir, float scale) {
    // Init phase

    // The initialization phase begins by identifying the voxel in which the ray origin is found. If the ray
    // origin is outside the grid, we find the point in which the ray enters the grid and take the adjacent voxel. 
    // The integer variables `position` are initialized to the starting voxel coordinates.

    // We assume that the AABB box is located in 0-1. We extend that to 0-4 so we match our DDAed unit box of 4x4x4.
    vec2 initialIntersectionT = intersectAABB(origin, dir, vec3(0.0, 0.0, 0.0), vec3(4.0, 4.0, 4.0));
    if (initialIntersectionT.x >= initialIntersectionT.y) {
        return;
    }
    reportIntersectionEXT(initialIntersectionT.x, 0);
    return;
}


void main()
{
    Block block = geometryInfo.blocks[gl_PrimitiveID];
    vec3 min = block.position.xyz;

    dda(
        gl_ObjectRayOriginEXT - min, // origin
        gl_ObjectRayDirectionEXT, // dir
        1.0
    );
}

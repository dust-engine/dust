#version 460
#include "./headers/color.glsl"
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, set = 0, binding = 0) uniform readonly image2D u_src_img;
layout(rgb10_a2, set = 0, binding = 1) uniform readonly image2D u_src_img_albedo;
layout(set = 0, binding = 2) uniform writeonly image2D u_dst_img;

// Gamma correction
layout (constant_id = 0) const uint OUTPUT_TRANSFER_FUNCTION = 0;


layout (constant_id = 1) const float COLOR_SPACE_CONVERSION_0 = 1.0;
layout (constant_id = 2) const float COLOR_SPACE_CONVERSION_1 = 0.0;
layout (constant_id = 3) const float COLOR_SPACE_CONVERSION_2 = 0.0;
layout (constant_id = 4) const float COLOR_SPACE_CONVERSION_3 = 0.0;
layout (constant_id = 5) const float COLOR_SPACE_CONVERSION_4 = 1.0;
layout (constant_id = 6) const float COLOR_SPACE_CONVERSION_5 = 0.0;
layout (constant_id = 7) const float COLOR_SPACE_CONVERSION_6 = 0.0;
layout (constant_id = 8) const float COLOR_SPACE_CONVERSION_7 = 0.0;
layout (constant_id = 9) const float COLOR_SPACE_CONVERSION_8 = 1.0;


layout(set = 0, binding = 3) uniform Histogram {
    float avg;
} u_histogram;



// Same base implementation that Godot 4.0 uses for Tonemap ACES.

// https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl

// The code in this file was originally written by Stephen Hill (@self_shadow), who deserves all
// credit for coming up with this fit and implementing it. Buy him a beer next time you see him. :)

vec3 RRTAndODTFit(vec3 v) {
    vec3 a = v * (v + 0.0245786) - 0.000090537;
    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
    return a / b;
}

vec3 ACESFitted(vec3 color) {    
    vec3 fitted_color = color;

    // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
    mat3 rgb_to_rrt = mat3(
        vec3(0.59719, 0.35458, 0.04823),
        vec3(0.07600, 0.90834, 0.01566),
        vec3(0.02840, 0.13383, 0.83777)    
    );

    // ODT_SAT => XYZ => D60_2_D65 => sRGB
    mat3 odt_to_rgb = mat3(
        vec3(1.60475, -0.53108, -0.07367),
        vec3(-0.10208, 1.10813, -0.00605),
        vec3(-0.00327, -0.07276, 1.07602)
    );

    fitted_color *= rgb_to_rrt;

    // Apply RRT and ODT
    fitted_color = RRTAndODTFit(fitted_color);

    fitted_color *= odt_to_rgb;

    return fitted_color;
}

float LinearToSRGB(float color) {
    // Approximately pow(color, 1.0 / 2.2)
    return color <= 0.0031308 ? 12.92 * color : 1.055 * pow(color, 1.0 / 2.4) - 0.055;
}
float LinearToSCRGB(float color) {
  return color <= -0.0031308 ? -1.055 * pow(-color, 1.0 / 2.4) + 0.055 : LinearToSRGB(color);
}
float LinearToDisplayP3(float color)
{
    return color < 0.0030186 ? 12.92 * color : 1.055 * pow(color, 1.0 / 2.4) - 0.055;
}
float LinearToITU(float color) {
  const float beta = 0.0181;
  const float alpha = 1.0993;
  return color < beta ? 4.5 * color : alpha * pow(color, 0.45) - (alpha - 1.0);
}

float LinearToHLG(float color) {
  const float a = 0.17883277;
  const float b = 1.0 - 4.0 * a;
  const float c = 0.55991073;
  return color < (1.0 / 12.0) ? sqrt(3 * color) : a * log(12.0 * color - b) + c;
}
vec3 SwapchainOETF(vec3 normalizedLinearValue) {
  // Looking for EOTF-1 or OETF here.
  if(OUTPUT_TRANSFER_FUNCTION == 0) {
    // linear
    return normalizedLinearValue;
  } else if (OUTPUT_TRANSFER_FUNCTION == 1) {
    // sRGB EOTF-1
    // https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_SRGB
    return vec3(
      LinearToSRGB(normalizedLinearValue.x),
      LinearToSRGB(normalizedLinearValue.y),
      LinearToSRGB(normalizedLinearValue.z)
    );
  } else if (OUTPUT_TRANSFER_FUNCTION == 2) {
    // scRGB EOTF-1
    return vec3(
      LinearToSCRGB(normalizedLinearValue.x),
      LinearToSCRGB(normalizedLinearValue.y),
      LinearToSCRGB(normalizedLinearValue.z)
    );
  }else if (OUTPUT_TRANSFER_FUNCTION == 3) {
    // DCI_P3
    // https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_DCIP3
    return pow((normalizedLinearValue / 52.37), vec3(1 / 2.6));
  } else if (OUTPUT_TRANSFER_FUNCTION == 4) {
    // Display P3 OETF
    // https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkColorSpaceKHR.html
    return vec3(
      LinearToDisplayP3(normalizedLinearValue.x),
      LinearToDisplayP3(normalizedLinearValue.y),
      LinearToDisplayP3(normalizedLinearValue.z)
    );
  } else if (OUTPUT_TRANSFER_FUNCTION == 5) {
    // ITU OETF
    // https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_ITU
    return vec3(
      LinearToITU(normalizedLinearValue.x),
      LinearToITU(normalizedLinearValue.y),
      LinearToITU(normalizedLinearValue.z)
    );
  } else if (OUTPUT_TRANSFER_FUNCTION == 6) {
    // ST2084_PQ EOTF-1
    // https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_PQ
    // TODO: This seems incorrect. The produced image looks too bright.
    const float m1 = 2610.0 / 16384.0;
    const float m2 = (2523.0 / 4096.0) * 128.0;
    const float c2 = (2413.0 / 4096.0) * 32.0;
    const float c3 = (2392.0 / 4096.0) * 32.0;
    const float c1 = c3 - c2 + 1.0;
    const vec3 Lm = pow(normalizedLinearValue, vec3(m1));
    return pow((c1 + c2 * Lm) / (1.0 + c3 * Lm), vec3(m2));
  } else if (OUTPUT_TRANSFER_FUNCTION == 7) {
    // HLG OETF
    // https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_HLG
    return vec3(
      LinearToHLG(normalizedLinearValue.x),
      LinearToHLG(normalizedLinearValue.y),
      LinearToHLG(normalizedLinearValue.z)
    );
  } else if (OUTPUT_TRANSFER_FUNCTION == 8) {
    // AdobeRGB
    // https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_ADOBERGB
    return pow(normalizedLinearValue, vec3(256.0 / 563.0));
  } else {
    return normalizedLinearValue;
  }
}


vec3 _NRD_YCoCgToLinear( vec3 color )
{
    float t = color.x - color.z;

    vec3 r;
    r.y = color.x + color.z;
    r.x = t + color.y;
    r.z = t - color.y;

    return max( r, 0.0 );
}
vec4 REBLUR_BackEnd_UnpackRadianceAndNormHitDist( vec4 data )
{
    data.xyz = _NRD_YCoCgToLinear( data.xyz );

    return data;
}



void main() {
    uvec2 dim = min(imageSize(u_src_img).xy, imageSize(u_dst_img).xy);

    // Ignore threads that map to areas beyond the bounds of our image
    if (gl_GlobalInvocationID.x >= dim.x && gl_GlobalInvocationID.y >= dim.y) {
      return;
    }

    vec4 in_value = imageLoad(u_src_img, ivec2(gl_GlobalInvocationID.xy));
    in_value = REBLUR_BackEnd_UnpackRadianceAndNormHitDist(in_value);
    vec3 albedo = imageLoad(u_src_img_albedo, ivec2(gl_GlobalInvocationID.xy)).xyz; // in nonlinear SRGB space
    albedo.x = SRGBToLinear(albedo.x);
    albedo.y = SRGBToLinear(albedo.y);
    albedo.z = SRGBToLinear(albedo.z);

    float exposure = 0.03; //1.0 / (9.6*u_histogram.avg);
    exposure *= 9.6;
    //exposure = 0.05;

    // Tone mapping
    vec3 mapped = sRGB2AECScg(AECScg2sRGB(in_value.xyz) * albedo.xyz) * exposure;

    const mat3 COLOR_SPACE_CONVERSION = mat3(
      COLOR_SPACE_CONVERSION_0, COLOR_SPACE_CONVERSION_1, COLOR_SPACE_CONVERSION_2,
      COLOR_SPACE_CONVERSION_3, COLOR_SPACE_CONVERSION_4, COLOR_SPACE_CONVERSION_5,
      COLOR_SPACE_CONVERSION_6, COLOR_SPACE_CONVERSION_7, COLOR_SPACE_CONVERSION_8
    );

    // Map to swapchain color space
    mapped = COLOR_SPACE_CONVERSION * mapped;

    mapped = ACESFitted(mapped);

    // Apply OETF coorection
    vec3 corrected = SwapchainOETF(mapped);

    imageStore(u_dst_img, ivec2(gl_GlobalInvocationID.xy), vec4(corrected, 1.0));
}

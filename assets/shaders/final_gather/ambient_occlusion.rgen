#include "../headers/standard.glsl"
#include "../headers/layout.playout"
#include "../headers/nrd.glsl"
#include "../headers/normal.glsl"
#include "../headers/camera.glsl"



layout(location = 0) rayPayloadEXT struct RayPayload {
    vec3 illuminance;
} payload;


void main() {
    float hitT = imageLoad(img_depth, ivec2(gl_LaunchIDEXT.xy)).x;
    if (hitT == 1.0 / 0.0) {
        // Did not hit.
        return;
    }

    float unused;
    vec3 normalWorld = NRD_FrontEnd_UnpackNormalAndRoughness(imageLoad(img_normal, ivec2(gl_LaunchIDEXT.xy)), unused).xyz;
    vec3 hitLocation = hitT * camera_ray_dir() + camera_origin() + normalWorld * 0.01;

    vec4 in_value = imageLoad(img_illuminance, ivec2(gl_LaunchIDEXT.xy));
    in_value = REBLUR_BackEnd_UnpackRadianceAndNormHitDist(in_value);

    vec3 noiseSample = texelFetch(blue_noise[5], ivec2((gl_LaunchIDEXT.xy + uvec2(7, 183) + push_constants.rand) % textureSize(blue_noise[5], 0)), 0).xyz * 2.0 - 1.0;
    // noiseSample is weighted on the z axis
    noiseSample = rotateVectorByNormal(normalWorld, noiseSample);

    // Shoot shadow ray
    payload.illuminance = in_value.xyz;
    traceRayEXT(
        acceleration_structure,
        gl_RayFlagsOpaqueEXT, // RayFlags
        0xFF, // CullMask
        1, // SBT offset, ray type index // Use the same intersection shader. We need higher-quality intersection for shadow rays as well.
        4, // SBT stride, number of ray types // TODO: Make this a shader constant
        1, // missIndex
        hitLocation,     // ray origin
        0.1,           // ray min range. If we set this to 0.0, VK_DEVICE_LOST. Time stuck: 2 days
        normalize(noiseSample), // direction
        AMBIENT_OCCLUSION_THRESHOLD, // tmax
        0 // payload
    );
}

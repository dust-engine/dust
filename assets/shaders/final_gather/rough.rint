#include "../headers/standard.glsl"
#include "../headers/sbt.glsl"

hitAttributeEXT HitAttribute {
    uint _unused;
} hitAttributes;

#ifdef SHADER_INT_64
#define GridType uint64_t
#define GridCheck(grid, hit) ((grid & (uint64_t(1) << hit)) == 0)
#define GridIsEmpty(grid) (grid == 0)
#else
#define GridType u32vec2
#define GridCheck(grid, hit) (((hit < 32) ?(grid.x & (1 << hit)):(grid.y & (1 << (hit - 32)))) == 0)
#define GridIsEmpty(grid) (grid.x == 0 && grid.y == 0)
#endif


layout(constant_id = 2) const bool RoughIntersectionTest = false;

vec2 intersectAABB(vec3 origin, vec3 dir, vec3 box_min, vec3 box_max) {
    vec3 tMin = (box_min - origin) / dir;
    vec3 tMax = (box_max - origin) / dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float t_min = max(max(t1.x, t1.y), t1.z);
    float t_max = min(min(t2.x, t2.y), t2.z);
    return vec2(t_min, t_max);
}

// TODO: consolidate intersection shaders


/**
  Intersects ray with a unix box with 4x4x4 voxels. A branchless implementation of
  Amanatides, John & Woo, Andrew. (1987). A Fast Voxel Traversal Algorithm for Ray Tracing. Proceedings of EuroGraphics. 87.

  @param(origin): The origin of the ray.
  @param(dir):    The direction of the ray. Does not have to be normalized.
  @param(grid):   The occupancy of the 64 voxels encoded in z-curve order.
*/
void dda(vec3 origin, vec3 dir, GridType grid, float scale) {
    // Init phase

    // The initialization phase begins by identifying the voxel in which the ray origin is found. If the ray
    // origin is outside the grid, we find the point in which the ray enters the grid and take the adjacent voxel. 
    // The integer variables `position` are initialized to the starting voxel coordinates.

    // We assume that the AABB box is located in 0-1. We extend that to 0-4 so we match our DDAed unit box of 4x4x4.
    vec2 initialIntersectionT = intersectAABB(origin, dir, vec3(0.0, 0.0, 0.0), vec3(4.0, 4.0, 4.0));
    if (initialIntersectionT.x >= initialIntersectionT.y) {
        // No intersection
        return;
    }
    if (GridIsEmpty(grid)) {
        return;
    }
    reportIntersectionEXT(initialIntersectionT.x, 0);
}


void main()
{
    Block block = sbt.geometryInfo.blocks[gl_PrimitiveID];
    vec3 min = block.position.xyz;

    dda(
        gl_ObjectRayOriginEXT - min, // origin
        gl_ObjectRayDirectionEXT, // dir
        #ifdef SHADER_INT_64
        block.mask,
        #else
        u32vec2(block.mask1, block.mask2),
        #endif
        1.0
    );
}

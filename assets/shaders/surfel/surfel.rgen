#include "../headers/standard.glsl"
#include "../headers/layout.playout"
#include "../headers/surfel.glsl"
#include "../headers/normal.glsl"
#include "../headers/color.glsl"
#include "../headers/reservoir.glsl"

layout(location = 0) rayPayloadEXT struct RayPayload {
    uint32_t surfel_index;
} payload;


void main() {
    SurfelEntry entry = surfel_pool[gl_LaunchIDEXT.x];
    if (entry.direction >= 6) { // invalid entry
        return;
    }

    vec3 normal = faceId2Normal(uint8_t(entry.direction)); // world space

    
    uvec2 noiseSampleLocation;
    uint width = textureSize(blue_noise[1], 0).x;
    noiseSampleLocation.y = gl_LaunchIDEXT.x / width;
    noiseSampleLocation.x = gl_LaunchIDEXT.x - noiseSampleLocation.y * width;

    // Location on the patch
    vec3 origin = entry.position + 2.01 * normal;

    // Outgoing direction
    vec3 noiseSample = texelFetch(blue_noise[5], ivec2((noiseSampleLocation + uvec2(16, 47) + push_constants.rand) % textureSize(blue_noise[5], 0)), 0).xyz * 2.0 - 1.0;
    // noiseSample is weighted on the z axis
    noiseSample = rotateVectorByNormal(normal, noiseSample);
    

    // Shoot shadow ray
    traceRayEXT(
        acceleration_structure,
        gl_RayFlagsOpaqueEXT, // RayFlags
        0xFF, // CullMask
        3, // SBT offset, ray type index // Use the same intersection shader. We need higher-quality intersection for shadow rays as well.
        4, // SBT stride, number of ray types // TODO: Make this a shader constant
        3, // missIndex
        origin,     // ray origin
        0.1,           // ray min range. If we set this to 0.0, VK_DEVICE_LOST. Time stuck: 2 days
        normalize(noiseSample), // outgoing direction: cosine weighted on the normal direction
        10000.0, // tmax
        0 // payload
    );
    // TODO: stocastically caste rays directly to light sources also
}

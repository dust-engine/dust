#version 460
#include "standard.glsl"

layout(location = 0) rayPayloadEXT struct Payload {
    vec3 normal;
} payload;


void main() {
    float hitT = imageLoad(u_depth, ivec2(gl_LaunchIDEXT.xy)).x;
    if (hitT == 0.0) {
        // Did not hit.
        return;
    }
    const vec3 sunDir = sunlight_config.direction.xyz;
    
    float unused;
    payload.normal = NRD_FrontEnd_UnpackNormalAndRoughness(imageLoad(u_normal, ivec2(gl_LaunchIDEXT.xy)), unused).xyz;
    if (dot(sunDir, payload.normal) < 0) {
        return;
    }
    vec3 hitLocation = hitT * camera_ray_dir() + camera_origin() + payload.normal * 0.01;
    // Shoot shadow ray
    traceRayEXT(
        accelerationStructure,
        gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, // RayFlags
        0xFF, // CullMask
        1, // SBT offset, ray type index // Use the same intersection shader. We need higher-quality intersection for shadow rays as well.
        3, // SBT stride, number of ray types // TODO: Make this a shader constant
        1, // missIndex
        hitLocation,     // ray origin
        0.1,           // ray min range
        normalize(sunDir), // direction
        u_camera.far, // tmax
        0 // payload
    );
}

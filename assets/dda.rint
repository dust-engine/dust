#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types : require

layout(buffer_reference, buffer_reference_align = 8, scalar) buffer GeometryInfo {
    vec3 values[];
};

layout(shaderRecordEXT) buffer sbt {
    GeometryInfo geometryInfo;
    uint32_t materialInfo;
};

vec2 intersectAABB(vec3 origin, vec3 dir, vec3 box_min, vec3 box_max) {
    vec3 tMin = (box_min - origin) / dir;
    vec3 tMax = (box_max - origin) / dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float t_min = max(max(t1.x, t1.y), t1.z);
    float t_max = min(min(t2.x, t2.y), t2.z);
    return vec2(t_min, t_max);
}

void main()
{
    //vec3 min = geometryInfo.values[gl_PrimitiveID * 2];
    //vec3 max = geometryInfo.values[gl_PrimitiveID * 2 + 1];

    //vec2 intersection = intersectAABB(gl_WorldRayOriginEXT, gl_WorldRayDirectionEXT , min, max);
    reportIntersectionEXT(10.0, 0);
}

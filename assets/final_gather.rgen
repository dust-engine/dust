#version 460
#include "standard.glsl"

layout(location = 0) rayPayloadEXT struct RayPayload {
    vec3 illuminance;
} payload;


void main() {
    float hitT = imageLoad(u_depth, ivec2(gl_LaunchIDEXT.xy)).x;
    if (hitT == 0.0) {
        // Did not hit.
        return;
    }
    payload.illuminance = imageLoad(u_illuminance, ivec2(gl_LaunchIDEXT.xy)).xyz;

    float unused;
    vec3 normalWorld = NRD_FrontEnd_UnpackNormalAndRoughness(imageLoad(u_normal, ivec2(gl_LaunchIDEXT.xy)), unused).xyz;
    vec3 hitLocation = hitT * camera_ray_dir() + camera_origin() + normalWorld * 0.01;

    vec3 noiseSample = texelFetch(blue_noise, ivec2((gl_LaunchIDEXT.xy + uvec2(7, 183) + pushConstants.rand) % textureSize(blue_noise, 0)), 0).xyz;
    // noiseSample is weighted on the z axis
    noiseSample = noiseSample * 2.0 - 1.0;

    const vec3 k = cross(vec3(0, 0, 1), normalWorld);
    const float cosTheta = dot(vec3(0, 0, 1), normalWorld);
    const float sinTheta = length(k);
    const vec3 crossed = cross(k, noiseSample);
    vec3 rotatedNoiseSample = noiseSample * cosTheta + crossed * sinTheta + k * dot(k, noiseSample) * (1.0 - cosTheta);

    if (dot(rotatedNoiseSample, vec3(normalWorld)) < 0.0) {
        rotatedNoiseSample = -rotatedNoiseSample;
    }

    // Shoot shadow ray
    traceRayEXT(
        accelerationStructure,
        gl_RayFlagsOpaqueEXT, // RayFlags
        0xFF, // CullMask
        2, // SBT offset, ray type index // Use the same intersection shader. We need higher-quality intersection for shadow rays as well.
        3, // SBT stride, number of ray types // TODO: Make this a shader constant
        2, // missIndex
        hitLocation,     // ray origin
        u_camera.near,           // ray min range. If we set this to 0.0, VK_DEVICE_LOST. Time stuck: 2 days
        rotatedNoiseSample, // direction
        u_camera.far, // tmax
        0 // payload
    );
}
